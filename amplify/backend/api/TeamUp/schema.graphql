type User
  @model
  @auth(rules: [{allow: private, operations: [create, read, update]}]) {
  id: ID!
  username: String
  email: String
  name: String
  image: String
  bio: String
  gender: Gender
  skill: String
  language: String
  sport: Sport
  age: String
  location: String
  connections: [Connection] @hasMany(indexName: "byUser", fields: ["id"])
  chats: [Chat] @hasMany(indexName: "byUser", fields: ["id"])
}

type Connection
  @model
  @auth(rules: [{allow: private, operations: [create, read, update]}]) {
  id: ID!
  status: ConnectionStatus!
  userID: ID! @index(name: "byUser")
  senderID: ID! @index(name: "bySenderID")
  receiverID: ID! @index(name: "byReceiverID")
  chatID: ID
  lastMessageID: ID
  sender: User @belongsTo(fields: ["senderID"])
  receiver: User @belongsTo(fields: ["receiverID"])
  lastMessage: Message @hasOne(fields: ["lastMessageID"])
  chat: Chat @hasOne
}

type Chat
  @model
  @auth(rules: [{allow: private, operations: [create, read, update]}]) {
  id: ID!
  connectionID: ID!
  userIdD: ID @index(name: "byUser")
  connection: Connection @belongsTo(fields: ["connectionID"])
  messages: [Message] @hasMany(indexName: "byChat", fields: ["id"])
}

type Message
  @model
  @auth(rules: [{allow: private, operations: [create, read, update]}]) {
  id: ID!
  chatID: ID! @index(name: "byChat")
  chat: Chat @belongsTo(fields: ["chatID"])
  content: String
  senderID: ID!
  seen: Boolean
  createdAt: AWSDateTime
  connectionID: ID! @index(name: "byConnection")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Sport {
  BASKETBALL
  VOLLEYBALL
  FOOTBALL
  CRICKET
  TABLETENNIS
  GYM
  BOXING
  RUNNING
  BADMINTON
}

enum ConnectionStatus {
  REQUESTED
  ACCEPTED
  DECLINED
}
